# 第７章 正規表現によるパターンマッチング
import re

# 7.3 正規表現によるパターンマッチの続き
print('>>>7.3')
# 7.3.1 丸カッコを用いたグルーピング
print('>>>7.3.1')
phone_num_regex = re.compile(r'(\d\d\d)-(\d\d\d-\d\d\d\d)')
mo = phone_num_regex.search('私の電話番号は415-555-4242です。')
print(mo.group(1))
print(mo.group(2))
print(mo.group(0))
print(mo.group())
"""
>>>7.3
>>>7.3.1
415
555-4242
415-555-4242
415-555-4242
"""
print(mo.groups())
area_code, main_number=mo.groups()
print(area_code)
print(main_number)
"""
('415', '555-4242')
415
555-4242
"""
phone_num_regex = re.compile(r'(\(\d\d\d\))-(\d\d\d-\d\d\d\d)')
mo = phone_num_regex.search('私の電話番号は(415)-555-4242です。')
print(mo.group(1))
print(mo.group(2))
"""
(415)
555-4242
"""

# 7.3.2 縦線を使って複数のグループとマッチする
print('>>>7.3.2')
hero_regex = re.compile(r'Batman|Tina Fey')
mo1 = hero_regex.search('Batman and Tina Fey.')
print(mo1.group())
mo2 = hero_regex.search('Tina Fey and Batman.')
print(mo2.group())
"""
>>>7.3.2
Batman
Tina Fey
"""
bat_regex = re.compile(r'Bat(man|mobile|copter|bat)')
mo = bat_regex.search('Batmobile lost a wheel')
print(mo.group())
print(mo.group(1))
"""
Batmobile
mobile
"""

# 7.3.3 疑問符を用いた任意のマッチ
print('>>>7.3.3')
bat_regex = re.compile(r'Bat(wo)?man')
mo1 = bat_regex.search('The Adventures of Batman')
print(mo1.group())
mo2 = bat_regex.search('The Adventures of Batwoman')
print(mo2.group())
"""
>>>7.3.3
Batman
Batwoman
"""
# 市外局番の有無にかかわらず電話番号を検索したい
phone_regex = re.compile(r'(\d\d\d-)?\d\d\d-\d\d\d\d')
mo1 = phone_regex.search('私の電話番号は415-555-4242です。')
print(mo1.group())
mo2 = phone_regex.search('私の電話番号は555-4242です。')
print(mo2.group())
"""
415-555-4242
555-4242
"""

# 7.3.4 アスタリスクを用いた０回以上マッチ
print('>>>7.3.4')
bat_regex = re.compile(r'Bat(wo)*man')
mo1 = bat_regex.search('The Adventures of Batman')
print(mo1.group())
mo2 = bat_regex.search('The Adventures of Batwoman')
print(mo2.group())
mo3 = bat_regex.search('The Adventures of Batwowowowowowowowowowoman')
print(mo3.group())
"""
>>>7.3.4
Batman
Batwoman
Batwowowowowowowowowowoman
"""

# 7.3.5 プラスを用いた１回以上のマッチ
print('>>>7.3.5')
bat_regex = re.compile(r'Bat(wo)+man')
mo1 = bat_regex.search('The Adventures of Batwoman')
print(mo1.group())
mo2 = bat_regex.search('The Adventures of Batwowowowowowowowowowoman')
print(mo2.group())
mo3 = bat_regex.search('The Adventures of Batman')
print(mo3 == None)
"""
>>>7.3.5
Batwoman
Batwowowowowowowowowowoman
True
"""

# 7.3.6 波カッコを用いて繰り返し回数を指定する
print('>>>7.3.6')
ha_regex = re.compile(r'(Ha){3,5}')
mo1 = ha_regex.search('HaHaHaHaHa')
print(mo1.group())
mo2 = ha_regex.search('Ha')
print(mo2 == None)
"""
>>>7.3.6
HaHaHaHaHa
True
"""

# 7.4 貪欲マッチと非貪欲マッチ
print('>>>7.4')
greedy_Ha_regex = re.compile(r'(Ha){3,5}')
mo1 = greedy_Ha_regex.search('HaHaHaHaHa')
print(mo1.group())
nongreedy_Ha_regex = re.compile(r'(Ha){3,5}?')
mo2 = nongreedy_Ha_regex.search('HaHaHaHaHa')
print(mo2.group())
"""
>>>7.4
HaHaHaHaHa
HaHaHa
"""

# 7.5 findall() メソッド
print('>>>7.5')
phone_num_regex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')
mo = phone_num_regex.search('Cell: 415-555-9999 Work: 212-555-0000')
print(mo.group())
phone_num_regex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')
mo1 = phone_num_regex.findall('Cell: 415-555-9999 Work: 212-555-0000')
print(mo1)  # findall()はリストを返す
phone_num_regex_2 = re.compile(r'(\d\d\d)-(\d\d\d)-(\d\d\d\d)')
mo2 = phone_num_regex_2.findall('Cell: 415-555-9999 Work: 212-555-0000')
print(mo2)  # グループが含まれているなら、タプルのリストを返す
"""
>>>7.5
415-555-9999
['415-555-9999', '212-555-0000']
[('415', '555', '9999'), ('212', '555', '0000')]
"""

# 7.6 文字集合
print('>>>7.6')
xmas_regex = re.compile(r'\d+\s\w+')
mo = xmas_regex.findall('12 drummers, 11 pipers, 10 lords, 9 ladies, 8 maids, 7 swans, 6 geese, 5 rings, 4 birds, 3 hens, 2 doves, 1 partridge')
print(mo)
"""
>>>7.6
['12 drummers', '11 pipers', '10 lords', '9 ladies', '8 maids', '7 swans', '6 geese', '5 rings', '4 birds', '3 hens', '2 doves', '1 partridge']
"""

# 7.7 独自に文字集合を定義する
print('>>>7.7')
vowel_regex = re.compile(r'[aeiouAEIOU]')
mo = vowel_regex.findall('RoboCop eats baby food. BABY FOOD.')
print(mo)
"""
>>>7.7
['o', 'o', 'o', 'e', 'a', 'a', 'o', 'o', 'A', 'O', 'O']
"""
consonant_regex = re.compile(r'[^aeiouAEIOU]')
mo = consonant_regex.findall('RoboCop eats baby food. BABY FOOD.')
print(mo)
"""
['R', 'b', 'C', 'p', ' ', 't', 's', ' ', 'b', 'b', 'y', ' ', 'f', 'd', '.', ' ', 'B', 'B', 'Y', ' ', 'F', 'D', '.']
"""

# 7.8 キャレットとドル記号
print('>>>7.8')
"""
>>> import re
# キャレット記号（^）は検索対象の文字列の先頭にマッチすることを指定するとき
    >>> begins_with_hello = re.compile(r'^Hello')
    >>> begins_with_hello.search('Hello world!')
    <re.Match object; span=(0, 5), match='Hello'>
    >>> begins_with_hello.search('He said hello') == None
    True
# ドル記号（$）は検索対象の文字列の末尾にマッチすることを指定するとき
    >>> ends_with_number = re.compile(r'\d$')
    >>> ends_with_number.search('Your number is 42')
    <re.Match object; span=(16, 17), match='2'>
    >>> ends_with_number.search('You are 42 years old.') == None
    True
# ^\d+$ は全体が１文字以上の数字である文字列とマッチする
    >>> whole_string_is_num = re.compile(r'^\d+$')
    >>> whole_string_is_num.search('1234567890')
    <re.Match object; span=(0, 10), match='1234567890'>
    >>> whole_string_is_num.search('12345xyz67890') == None
    True
    >>> whole_string_is_num.search('12 34567890') == None
    True
"""

# 7.9 ワイルドカード文字
print('>>>7.9')
at_regex = re.compile(r'.at')
mo = at_regex.findall('The cat in the hat sat on the flat mat.')
print(mo)
"""
['cat', 'hat', 'sat', 'lat', 'mat']
"""
# 7.9.1 ドットとアスタリスクであらゆる文字列とマッチする
print('>>>7.9.1')
# .* は貪欲モード
name_ragex = re.compile(r'First Name: (.*) Last Name: (.*)')
mo = name_ragex.search('First Name: Al Last Name: Sweigart')
print(mo.group(1))
print(mo.group(2))
"""
>>>7.9.1
Al
Sweigart
"""
# .*? は非貪欲モード
nongreedy_regex = re.compile(r'<.*?>')  # 非貪欲
mo = nongreedy_regex.search('<To serve man> for dinner.>')
print(mo.group())
greedy_regex = re.compile(r'<.*>') # 貪欲
mo = greedy_regex.search('<To serve man> for dinner.>')
print(mo.group())
"""
<To serve man>
<To serve man> for dinner.>
"""

# 7.9.2 ドット文字を改行とマッチさせる
print('>>>7.9.2')
no_newline_regex = re.compile('.*')
mo = no_newline_regex.search('Serve the public trust.\nProtect the innocent.\nUphold the law.')
print(mo.group())
"""
>>>7.9.2
Serve the public trust.
"""
newline_regex = re.compile('.*', re.DOTALL)
mo = newline_regex.search('Serve the public trust.\nProtect the innocent.\nUphold the law.')
print(mo.group())
"""
Serve the public trust.
Protect the innocent.
Uphold the law.
"""

# 7.11 大文字・小文字を無視したマッチ
print('>>>7.11')
# 次の正規表現はまったく異なる文字列とマッチする
regex1 = re.compile('RoboCop')
regex2 = re.compile('ROBOCOP')
regex3 = re.compile('robOcop')
regex4 = re.compile('RobocOp')
# re.IGNORECASE / re.I をつかって大文字小文字を区別せずにマッチさせる
robocop = re.compile(r'robocop', re.I)
mo = robocop.search('RoboCop is part man, part machine, all cop.')
print(mo.group())
mo = robocop.search('ROBOCOP protects the innocent.')
print(mo.group())
mo = robocop.search('Al, why does your programming book talk about robocop so much?')
print(mo.group())
"""
>>>7.11
RoboCop
ROBOCOP
robocop
"""

# 7.12 sub() メソッドを用いて文字列を置換する
print('>>>7.12')
names_ragex = re.compile(r'Agent \w+')
text = 'Agent Alice gave the secret documents to Agent Bob.'
mo = names_ragex.sub('CENSORED', text)
print(mo)
"""
>>>7.12
CENSORED gave the secret documents to CENSORED.
"""
# マッチした文字列を置き換えの一部として使う
agent_names_regex = re.compile(r'Agent (\w)\w*')
text = 'Agent Alice told Agent Carol that Agent Eve knew Agent Bob was a double agent.'
mo = agent_names_regex.sub(r'\1****', text)
print(mo)
"""
A**** told C**** that E**** knew B**** was a double agent.
"""

# 7.13 複雑な正規表現を管理する
phone_regex = re.compile(r'''(
(\d{3}|\(\d{3}\))?          # ３桁の市外局番（()が付いてもよい）
(\s|-|\.)?                  # 区切り（スペースかハイフンかドット）
\d{3}                       # ３桁の市内局番
(\s|-|\.)                   # 区切り
\d{4}                       # ４桁の番号
(\s*(ext|x|ext.)\s*\d{2,5}) # ２〜５桁の内線番号
)''', re.VERBOSE)

# 7.14 re.IGNORECASE と re.DOTALL と re.VERBOSE を組み合わせる
# re.VERBOSE    を使うと正規表現にコメントを残せる
# re.IGNORECASE を使うと大文字と小文字を区別しないようにする
# re.DOTALL     を使うとドット文字が改行を含むすべての文字とマッチするようになる
# re.compile()  は第２引数に１つの値しか取らない
# | ...「論理和演算子」
"""
some_regex_value
    = re.compile(正規表現, re.IGNORECASE | re.DOTALL | re.VERBOSE)
"""
